#+title: technicolor
#+subtitle: (almost) universal programmatic color palette access
#+author: Aatmun Baxi
Programmatic access to custom theme color palettes.

* The Problem
Many custom emacs themes provide their own color palettes as a variable or
collection of variables. Unfortunately, for users who enjoy using theme-specific
colors in various parts of emacs, there's no universal way (that I know of) to
access these colors in elisp. Some theme collections like =doom-themes= and [[https://github.com/protesilaos][Prot's]]
themes define their own functions to access colors via elisp, but these
solutions are not homogeneous across theme collections.

If a user wants to access only a few colors in elisp from a variety of theme
palettes, they must adapt their elisp for each of those themes in order for the
code to adapt to theme changes properly. =technicolor= offer a partial solution,
allowing the user to define a minimal "universal" palette of colors they'd like
to access, and an API to access them.

* Using =technicolor=
technicolor comes with some preloaded configuration associated to a few popular
themes and theme packs, including doom themes, the modus-themes, ef-themes, and
standard-themes of Prot, and catppuccin themes. These are a good starting point
for configuration, but the user should still peer into the color palettes of the
themes they have and determine how they want to map colors. Here is an example:

Let's say you want to access the foreground color in elisp for the doom themes
and all of Prot's themes. You can set these colors in the =technicolor-colors=
list:
#+begin_src emacs-lisp
  (setq technicolor-colors '(foreground))
#+end_src
The theme's above have the following accessors we can use:
- Doom themes :: =doom-color=
- Prot themes :: =*-themes-get-color-value=

Now the doom themes use the symbols =fg= and for foreground, while Prot uses
=fg-main=, so we have to map our "universal" palette name to these values in their
respective configurations.

Here is what that will look like:
#+begin_src emacs-lisp
  (setq technicolor-themes '(("^doom-.*" doom-color '((foreground . fg)))
                             ("^modus-.*" modus-themes-get-color-value
                                                    '((foreground . fg-main)))
                             ...))
#+end_src
After this variable has been set, you can now access the foreground color of any
of these themes with =(technicolor-get-color 'foreground)= while they are loaded.
Note we have reproduced a subset of the default config provided by technicolor
for these themes.

By default, the above configurations will match all doom themes and all modus themes, but you can set per-theme rules on color mappings from the universal palette by changing the regex.
For example, if we wanted different rules for =modus-operandi-*= and =modus-vivendi-*=, we could write
#+begin_src emacs-lisp
  ' ...
    ("^modus-operandi" modus-themes-get-color-value '((...)))
    (("^modus-vivendi" modus-themes-get-color-value '((...)))
     ...)
    #+end_src
and the rules we specify would apply accordingly.

You may extend the value of =technicolor-colors= to any symbols representing
colors that you'd like to use. Provided you give appropriate mappings for each
theme, technicolor will find them.

Note that if /all/ of your themes provide the same symbol for a certain color, as
is common for generic colors like "red", "blue", etc, you don't need to specify
the mapping from the universal palette!

* Color Manipulation
technicolor also provides function to perform basic manipulation of colors,
using the same ethos of accessing the colors via =technicolor-get-color=. They are
listed below. More information can be found in docstrings.

- =technicolor-darken=
- =technicolor-lighten=
- =technicolor-complement=
- =technicolor-gradient=
- =technicolor-saturate=
- =technicolor-desaturate=
- =technicolor-blend=
